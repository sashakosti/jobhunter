import argparse
from src.hh_api import fetch_vacancies
from src.letter_generator import generate_letter


def print_vacancies(vacancies):
    for i, vac in enumerate(vacancies, 1):
        print(f"\n[{i}] {vac.name}")
        print(f"–ö–æ–º–ø–∞–Ω–∏—è: {vac.employer.name} ‚Äî –ì–æ—Ä–æ–¥: {vac.area.name}")
        if vac.salary_from or vac.salary_to:
            salary_str = f"{vac.salary_from or ''} - {vac.salary_to or ''} {vac.currency or ''}"
            print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_str}")
        print(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {vac.snippet_requirement}")
        print(f"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {vac.snippet_responsibility}")
        print(f"–°—Å—ã–ª–∫–∞: {vac.url}")
        print("-" * 50)


def main():
    parser = argparse.ArgumentParser(description="–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ hh.ru")
    parser.add_argument("--keywords", required=True, help="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python developer)")
    parser.add_argument("--area", default="1", help="ID —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞ ‚Äî 1)")
    parser.add_argument("--limit", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")

    args = parser.parse_args()

    print(f"üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {args.keywords}")
    vacancies = fetch_vacancies(args.keywords, area=args.area, per_page=args.limit)
    print_vacancies(vacancies)

    if vacancies:
        choice = input("\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ (–∏–ª–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if choice.isdigit():
            index = int(choice) - 1
            if 0 <= index < len(vacancies):
                letter = generate_letter(vacancies[index])
                print("\nüìÑ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n")
                print(letter)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        else:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    main()

